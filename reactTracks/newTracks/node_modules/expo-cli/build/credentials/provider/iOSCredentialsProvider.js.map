{"version":3,"sources":["../../../src/credentials/provider/iOSCredentialsProvider.ts"],"names":["iOSCredentialsProvider","constructor","projectDir","app","Context","initAsync","ctx","init","nonInteractive","hasRemoteAsync","distCert","ios","getDistCert","provisioningProfile","getProvisioningProfile","hasLocalAsync","credentialsJsonReader","fileExistsAsync","rawCredentialsJson","readRawAsync","err","log","error","isLocalSyncedAsync","remote","local","Promise","all","getRemoteAsync","getLocalAsync","r","l","distributionCertificate","certP12","certPassword","_","getCredentialsAsync","src","CredentialsSource","LOCAL","REMOTE","readIosCredentialsAsync","SetupIosBuildCredentials","Error"],"mappings":"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","sourcesContent":["import { CredentialsSource } from '../../easJson';\nimport log from '../../log';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context } from '../context';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport { SetupIosBuildCredentials } from '../views/SetupIosBuildCredentials';\nimport { CredentialsProvider } from './provider';\n\nexport interface iOSCredentials {\n  provisioningProfile: string;\n  distributionCertificate: {\n    certP12: string;\n    certPassword: string;\n  };\n}\n\nexport default class iOSCredentialsProvider implements CredentialsProvider {\n  public readonly platform = 'ios';\n  private readonly ctx = new Context();\n  private credentials?: iOSCredentials;\n\n  constructor(private projectDir: string, private app: AppLookupParams) {}\n\n  public async initAsync() {\n    await this.ctx.init(this.projectDir, {\n      nonInteractive: this.ctx.nonInteractive,\n    });\n  }\n\n  public async hasRemoteAsync(): Promise<boolean> {\n    const distCert = await this.ctx.ios.getDistCert(this.app);\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);\n    return !!(distCert || provisioningProfile);\n  }\n\n  public async hasLocalAsync(): Promise<boolean> {\n    if (!(await credentialsJsonReader.fileExistsAsync(this.projectDir))) {\n      return false;\n    }\n    try {\n      const rawCredentialsJson = await credentialsJsonReader.readRawAsync(this.projectDir);\n      return !!rawCredentialsJson?.ios;\n    } catch (err) {\n      log.error(err); // malformed json\n      return false;\n    }\n  }\n\n  public async isLocalSyncedAsync(): Promise<boolean> {\n    try {\n      const [remote, local] = await Promise.all([this.getRemoteAsync(), this.getLocalAsync()]);\n      const r = remote;\n      const l = local;\n      return !!(\n        r.provisioningProfile === l.provisioningProfile &&\n        r.distributionCertificate.certP12 === l.distributionCertificate.certP12 &&\n        r.distributionCertificate.certPassword === l.distributionCertificate.certPassword\n      );\n    } catch (_) {\n      return false;\n    }\n  }\n\n  public async getCredentialsAsync(\n    src: CredentialsSource.LOCAL | CredentialsSource.REMOTE\n  ): Promise<iOSCredentials> {\n    switch (src) {\n      case CredentialsSource.LOCAL:\n        return await this.getLocalAsync();\n      case CredentialsSource.REMOTE:\n        return await this.getRemoteAsync();\n    }\n  }\n\n  private async getLocalAsync(): Promise<iOSCredentials> {\n    return await credentialsJsonReader.readIosCredentialsAsync(this.projectDir);\n  }\n  private async getRemoteAsync(): Promise<iOSCredentials> {\n    await runCredentialsManager(this.ctx, new SetupIosBuildCredentials(this.app));\n    const distCert = await this.ctx.ios.getDistCert(this.app);\n    if (!distCert) {\n      throw new Error('Missing distribution certificate'); // shouldn't happen\n    }\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);\n    if (!provisioningProfile) {\n      throw new Error('Missing provisioning profile'); // shouldn't happen\n    }\n    return {\n      provisioningProfile: provisioningProfile.provisioningProfile,\n      distributionCertificate: {\n        certP12: distCert.certP12,\n        certPassword: distCert.certPassword,\n      },\n    };\n  }\n}\n"],"file":"iOSCredentialsProvider.js"}