{"version":3,"sources":["../../src/commands/doctor.ts"],"names":["action","projectDir","Doctor","validateExpoServersAsync","validateWithNetworkAsync","NO_ISSUES","process","exit","program","command","description","asyncActionProjectDir"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,MAAf,CAAsBC,UAAtB,EAA0C;AACxC;AACA,QAAMC,cAAOC,wBAAP,CAAgCF,UAAhC,CAAN;;AAEA,MAAI,CAAC,MAAMC,cAAOE,wBAAP,CAAgCH,UAAhC,CAAP,MAAwDC,cAAOG,SAAnE,EAA8E;AAC5E,wBAAK,2CAAL;AACD;;AACDC,EAAAA,OAAO,CAACC,IAAR;AACD;;AAEc,kBAAUC,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,sBADX,EAEGC,WAFH,CAEe,0CAFf,EAGGC,qBAHH,CAGyBX,MAHzB;AAID","sourcesContent":["import { Doctor } from '@expo/xdl';\nimport { Command } from 'commander';\n\nimport log from '../log';\n\nasync function action(projectDir: string) {\n  // note: this currently only warns when something isn't right, it doesn't fail\n  await Doctor.validateExpoServersAsync(projectDir);\n\n  if ((await Doctor.validateWithNetworkAsync(projectDir)) === Doctor.NO_ISSUES) {\n    log(`Didn't find any issues with your project!`);\n  }\n  process.exit();\n}\n\nexport default function (program: Command) {\n  program\n    .command('doctor [project-dir]')\n    .description('Diagnoses issues with your Expo project.')\n    .asyncActionProjectDir(action);\n}\n"],"file":"doctor.js"}