{"version":3,"sources":["../../../../../src/commands/eas-build/build/builders/AndroidBuilder.ts"],"names":["AndroidBuilder","constructor","ctx","eas","builds","android","Error","buildProfile","setupAsync","ensureCredentialsAsync","credentialsPrepared","shouldLoadCredentials","provider","AndroidCredentialsProvider","projectDir","projectName","accountName","initAsync","credentialsSource","workflow","nonInteractive","credentials","getCredentialsAsync","configureProjectAsync","spinner","androidAppDir","path","join","buildGradlePath","easGradlePath","fs","writeFile","gradleContent","intentToAdd","buildGradleContent","readFile","applyEasGradle","isAlreadyConfigured","split","some","line","replace","trim","gitUtils","ensureGitStatusIsCleanAsync","succeed","err","DirtyGitTreeError","log","newLine","reviewAndCommitChangesAsync","chalk","green","figures","tick","e","fail","prepareJobAsync","archiveUrl","Workflow","Generic","prepareGenericJobAsync","Managed","prepareManagedJobAsync","prepareJobCommonAsync","secrets","keystore","dataBase64","keystorePassword","keyAlias","keyPassword","platform","Platform","Android","projectUrl","type","BuildType","gradleCommand","artifactPath","_buildProfile","packageJson","example","manifest","withoutCredentials"],"mappings":"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","sourcesContent":["import { Android, BuildType, Job, Platform, sanitizeJob } from '@expo/build-tools';\nimport chalk from 'chalk';\nimport figures from 'figures';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport path from 'path';\n\nimport AndroidCredentialsProvider, {\n  AndroidCredentials,\n} from '../../../../credentials/provider/AndroidCredentialsProvider';\nimport {\n  AndroidBuildProfile,\n  AndroidGenericBuildProfile,\n  AndroidManagedBuildProfile,\n  Workflow,\n} from '../../../../easJson';\nimport { gitAddAsync } from '../../../../git';\nimport log from '../../../../log';\nimport { ensureCredentialsAsync } from '../credentials';\nimport gradleContent from '../templates/gradleContent';\nimport { Builder, BuilderContext } from '../types';\nimport * as gitUtils from '../utils/git';\n\ninterface CommonJobProperties {\n  platform: Platform.Android;\n  projectUrl: string;\n  secrets?: {\n    keystore: Android.Keystore;\n  };\n}\n\nclass AndroidBuilder implements Builder {\n  private credentials?: AndroidCredentials;\n  private buildProfile: AndroidBuildProfile;\n  private credentialsPrepared: boolean = false;\n\n  constructor(public readonly ctx: BuilderContext) {\n    if (!ctx.eas.builds.android) {\n      throw new Error(\"missing android configuration, shouldn't happen\");\n    }\n    this.buildProfile = ctx.eas.builds.android;\n  }\n\n  public async setupAsync(): Promise<void> {}\n\n  public async ensureCredentialsAsync(): Promise<void> {\n    this.credentialsPrepared = true;\n    if (!this.shouldLoadCredentials()) {\n      return;\n    }\n    const provider = new AndroidCredentialsProvider(this.ctx.projectDir, {\n      projectName: this.ctx.projectName,\n      accountName: this.ctx.accountName,\n    });\n    await provider.initAsync();\n    const credentialsSource = await ensureCredentialsAsync(\n      provider,\n      this.buildProfile.workflow,\n      this.buildProfile.credentialsSource,\n      this.ctx.nonInteractive\n    );\n    this.credentials = await provider.getCredentialsAsync(credentialsSource);\n  }\n\n  public async configureProjectAsync(): Promise<void> {\n    const spinner = ora('Making sure your Android project is set up properly');\n\n    const { projectDir } = this.ctx;\n\n    const androidAppDir = path.join(projectDir, 'android', 'app');\n    const buildGradlePath = path.join(androidAppDir, 'build.gradle');\n    const easGradlePath = path.join(androidAppDir, 'eas-build.gradle');\n\n    await fs.writeFile(easGradlePath, gradleContent);\n    await gitAddAsync(easGradlePath, { intentToAdd: true });\n\n    const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf-8');\n    const applyEasGradle = 'apply from: \"./eas-build.gradle\"';\n\n    const isAlreadyConfigured = buildGradleContent\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === applyEasGradle || line === applyEasGradle.replace(/\"/g, \"'\"));\n\n    if (!isAlreadyConfigured) {\n      await fs.writeFile(buildGradlePath, `${buildGradleContent.trim()}\\n${applyEasGradle}\\n`);\n    }\n\n    try {\n      await gitUtils.ensureGitStatusIsCleanAsync();\n      spinner.succeed();\n    } catch (err) {\n      if (err instanceof gitUtils.DirtyGitTreeError) {\n        spinner.succeed('We configured your Android project to build it on the Expo servers');\n        log.newLine();\n\n        try {\n          await gitUtils.reviewAndCommitChangesAsync('Configure Android project', {\n            nonInteractive: this.ctx.nonInteractive,\n          });\n\n          log(`${chalk.green(figures.tick)} Successfully committed the configuration changes.`);\n        } catch (e) {\n          throw new Error(\n            \"Aborting, run the build command once you're ready. Make sure to commit any changes you've made.\"\n          );\n        }\n      } else {\n        spinner.fail();\n        throw err;\n      }\n    }\n  }\n\n  public async prepareJobAsync(archiveUrl: string): Promise<Job> {\n    if (!this.credentialsPrepared) {\n      throw new Error('ensureCredentialsAsync should be called before prepareJobAsync');\n    }\n    if (this.buildProfile.workflow === Workflow.Generic) {\n      return sanitizeJob(await this.prepareGenericJobAsync(archiveUrl, this.buildProfile));\n    } else if (this.buildProfile.workflow === Workflow.Managed) {\n      return sanitizeJob(await this.prepareManagedJobAsync(archiveUrl, this.buildProfile));\n    } else {\n      throw new Error(\"Unknown workflow. Shouldn't happen\");\n    }\n  }\n\n  private async prepareJobCommonAsync(archiveUrl: string): Promise<Partial<CommonJobProperties>> {\n    const secrets = this.credentials\n      ? {\n          secrets: {\n            keystore: {\n              dataBase64: this.credentials.keystore.keystore,\n              keystorePassword: this.credentials.keystore.keystorePassword,\n              keyAlias: this.credentials.keystore.keyAlias,\n              keyPassword: this.credentials.keystore.keyPassword,\n            },\n          },\n        }\n      : {};\n\n    return {\n      platform: Platform.Android,\n      projectUrl: archiveUrl,\n      ...secrets,\n    };\n  }\n\n  private async prepareGenericJobAsync(\n    archiveUrl: string,\n    buildProfile: AndroidGenericBuildProfile\n  ): Promise<Partial<Android.GenericJob>> {\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Generic,\n      gradleCommand: buildProfile.gradleCommand,\n      artifactPath: buildProfile.artifactPath,\n    };\n  }\n\n  private async prepareManagedJobAsync(\n    archiveUrl: string,\n    _buildProfile: AndroidManagedBuildProfile\n  ): Promise<Partial<Android.ManagedJob>> {\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Managed,\n      packageJson: { example: 'packageJson' },\n      manifest: { example: 'manifest' },\n    };\n  }\n\n  private shouldLoadCredentials(): boolean {\n    return (\n      this.buildProfile.workflow === Workflow.Managed ||\n      (this.buildProfile.workflow === Workflow.Generic && !this.buildProfile.withoutCredentials)\n    );\n  }\n}\n\nexport default AndroidBuilder;\n"],"file":"AndroidBuilder.js"}